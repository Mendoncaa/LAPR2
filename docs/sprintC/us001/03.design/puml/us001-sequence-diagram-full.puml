@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "HRM" as ADM
participant ":CreateSkillUI" as UI
participant ":CreateSkillController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "AuthFacade\n:AuthenticationRepository" as AUTHREP
participant "userSession\n:UserSession" as USER
participant "organizationRepository:\nOrganizationRepository" as OrganizationRepository
participant "organization\n:Organization" as ORG
participant "employeeRepository:\nEmployeeRepository" as EMPREP
participant "employee\n:Employee" as EMP
participant "Skill\n:Skill" as SKILL

activate ADM

        ADM -> UI : asks to create a new skill
        activate UI

        UI --> ADM : requests data (Name the skill)
    deactivate UI

    ADM -> UI : types requested data (Skill name)
    activate UI

        UI --> ADM : shows all data and requests confirmation
    deactivate UI

    ADM -> UI : confirms data
    activate UI

        UI -> CTRL : createSkill(Skill name)
        activate CTRL

        CTRL -> CTRL : getUserFromSession()

        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : Repositories
        deactivate RepositorySingleton

        CTRL -> PLAT : getAuthenticationRepository()

        activate PLAT
        CTRL <-- PLAT : AuthenticationRepository()
        deactivate PLAT

        CTRL -> AUTHREP : getCurrentUserSession()
        activate AUTHREP

        AUTHREP -> USER : isLoggedWithRule(HRM)
        activate USER

        AUTHREP <-- USER : "True/False"
        AUTHREP --> USER : getUserId(email)
        AUTHREP <-- USER : userId(email)
        deactivate USER

        CTRL <-- AUTHREP : userId(email)
        deactivate AUTHREP

        CTRL -> CTRL : getOrganizationByUserId(email)


        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : Repositories
        deactivate RepositorySingleton



        CTRL -> PLAT : getOrganizationRepository()
        activate PLAT
        CTRL <-- PLAT : OrganizationRepository()
        deactivate PLAT


        CTRL -> OrganizationRepository :getOrganizationByUserId(email)
        activate OrganizationRepository
            loop for each organization
            OrganizationRepository -> ORG : anyUserHasId(email)
            activate ORG
            OrganizationRepository <-- ORG : True/False
            deactivate ORG
            end loop

        CTRL <-- OrganizationRepository : organitazion

        CTRL -> RepositorySingleton : getInstance()
             activate RepositorySingleton
             CTRL <-- RepositorySingleton : Repositories
              deactivate RepositorySingleton

         CTRL -> EMPREP :getEmployeeByUserId(email)
             activate EMPREP
             loop for each employee
             EMPREP -> EMP : anyEmployeeHasThisUserId(email)
             activate EMP
             EMPREP <-- EMP : True/False
             deactivate EMP
             end loop

             CTRL <-- EMPREP : employee
             deactivate EMPREP



        CTRL -> ORG: createSkill(Skill name)
            activate ORG

            ORG -> SKILL**: create(skill)
            note right of SKILL
            Skill constructor validates Skill name
            endnote




            ORG -> ORG: addSkill(skill)

            ORG -> ORG: validateSkill(skill)



            ORG --> CTRL : skill
            deactivate ORG

            CTRL --> UI: skill
            deactivate CTRL
            UI --> ADM: displays operation success
    deactivate UI

deactivate ADM




@enduml