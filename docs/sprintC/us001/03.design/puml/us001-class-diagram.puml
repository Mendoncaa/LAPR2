@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction

class CreateSkillUI {
}

class CreateSkillController {
    - SkillRepository skillRepository
    - TeamMemberRepository teamMemberRepository

    'Constructor to initialize the controller with the SkillRepository and TeamMemberRepository'
    + CreateSkillController(skillRepository: SkillRepository, teamMemberRepository: TeamMemberRepository)

    'Method for creating a new skill'
    + createSkill(skillName: String): void
}

class Repositories {
    - static Repositories instance
    - SkillRepository skillRepository
    - TeamMemberRepository teamMemberRepository

    'Private constructor to implement the Singleton pattern'
    - Repositories()

    'Method to get Singleton instance from Repositories'
    + static getInstance(): Repositories

    'Method to obtain the skills repository'
    + getSkillRepository(): SkillRepository

    'Method to get team members repository'
    + getTeamMemberRepository(): TeamMemberRepository
}

class SkillRepository {
    - List<Skill> skills

    'Constructor to initialize the skills repository'
    + SkillRepository()

    'Returns a skill based on its name'
    + getSkillByName(skillName: String): Skill

    'Create a new skill and add it to the repository'
    + createSkill(skillName: String): Skill

    'Remove a skill from the repository'
    + deleteSkill(skillId: String): void
}

class TeamMemberRepository {
    - List<TeamMember> teamMembers

    'Constructor to initialize the team member repository'
    + TeamMemberRepository()

    'Returns a team member based on their ID'
    + getTeamMemberById(id: String): TeamMember

    'Creates a new team member and adds it to the repository'
    + createTeamMember(name: String): TeamMember

    'Remove a team member from the repository'
    + deleteTeamMember(id: String): void
}

class TeamMember {
    - id: String
    - name: String
    - List<Skill> skills

    'Constructor to create a new team member'
    + TeamMember(name: String)

    'Method for adding a skill to a team member'
    + addSkill(skill: Skill): void
}

class Skill {
    - String name

    'Constructor to create a new skill'
    + Skill(name: String)
}

CreateSkillUI .> CreateSkillController
CreateSkillController .> Repositories
CreateSkillController .> SkillRepository
CreateSkillController .> TeamMemberRepository
Repositories --> SkillRepository
Repositories --> TeamMemberRepository
SkillRepository --> Skill
TeamMemberRepository --> TeamMember
TeamMember ---> Skill




@enduml