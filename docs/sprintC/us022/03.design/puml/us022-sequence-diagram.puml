@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "Green Space Manager" as GSM
participant ":AgendaUI" as UI
participant ":AgendaController" as CTRL
participant "repositories\n:Repositories" as PLAT
participant "AuthFacade\n:AuthenticationRepository" as AUTHREP
participant "userSession\n:UserSession" as USER
participant "EmployeeRepository\n:EmployeeRepository" as EMPREP
participant "Employee\n:Employee" as EMP
participant "OrganizationRepository\n:OrganizationRepository" as ORGREP
participant "Organization\n:Organization" as ORG
participant "GreenSpaces:\nGreenSpaces" as GSR
participant "Tasks:\nTasks" as TASKREP

activate GSM

GSM -> UI : requests to add a new Agenda entry
activate UI

UI -> CTRL : getController()
activate CTRL

CTRL -> CTRL : getUserFromSession()

    CTRL -> PLAT : getInstance()
    activate PLAT
    CTRL <-- PLAT : Repositories
    deactivate PLAT

    CTRL -> PLAT : getAuthenticationRepository()
    activate PLAT
    CTRL <-- PLAT : AuthenticationRepository()
    deactivate PLAT

    CTRL -> AUTHREP : getCurrentUserSession()
    activate AUTHREP

    AUTHREP -> USER : isLoggedWithRole(GSM)
    activate USER

    AUTHREP <-- USER : "True/False"
    AUTHREP --> USER : getUserId(email)
    AUTHREP <-- USER : userId(email)
    deactivate USER

    CTRL <-- AUTHREP : userId(email)
    deactivate AUTHREP

    CTRL -> PLAT : getInstance()
    activate PLAT
    CTRL <-- PLAT : Repositories
    deactivate PLAT

    CTRL -> PLAT : getOrganizationRepository()
    activate PLAT
    CTRL <-- PLAT : OrganizationRepository()
    deactivate PLAT

    CTRL -> ORGREP : getOrganizationByUserID(email)
    activate ORGREP
    loop
        ORGREP -> ORG : anyUserHasId(email)
        activate ORG
        ORG --> ORGREP : True/False
        deactivate ORG
    end
    ORGREP --> CTRL : organization
    deactivate ORGREP

    CTRL -> PLAT : getEmployeeRepository()
    activate PLAT
    CTRL <-- PLAT : EmployeeRepository()
    deactivate PLAT

    CTRL -> EMPREP : getEmployeeByUserID(email)
    activate EMPREP
    loop
        EMPREP -> EMP : anyUserHasId(email)
        activate EMP
        EMP --> EMPREP : True/False
        deactivate EMP
    end
    EMPREP --> CTRL : employee
    deactivate EMPREP




CTRL -> EMP : getGreenSpacesManagedByMe()
activate EMP

EMP -> GSR : getGreenSpacesManagedByMe()
activate GSR
GSR --> EMP : List<GreenSpace>
deactivate GSR

EMP --> CTRL : List<GreenSpace>
deactivate EMP

CTRL --> UI : List<GreenSpace>
deactivate CTRL

UI --> GSM : Green Spaces managed by the GSM
deactivate UI

GSM -> UI : selects a green space (green spaces managed by me) from greenSpaceList
activate UI

UI -> CTRL : getPendingTasks()
activate CTRL

CTRL -> EMP : getPendingTasks()
activate EMP
EMP -> TASKREP : getPendingTasks()
activate TASKREP
TASKREP --> EMP : List<Task>
deactivate TASKREP
EMP --> CTRL : List<Task>
deactivate EMP
CTRL --> UI : List<Task>
deactivate CTRL
UI --> GSM : Presents list of pending tasks
deactivate UI

GSM -> UI : selects a task from the list of pending tasks
activate UI

UI -> GSM : requests starting date
GSM -> UI : types starting date
activate UI

UI -> CTRL : addNewAgendaEntry(selectedTask, selectedGreenSpace, startDate)
activate CTRL

CTRL -> EMP : planTaskInAgenda(selectedTask, startDate)
activate EMP
EMP -> TASK** : planTaskInAgenda(startDate)
activate TASK


EMP-> EMP : addNewAgendaEntry(Task)
deactivate TASK
EMP -> EMP: validateAgendaEntry(Task)



EMP -> CTRL : Task
deactivate EMP

CTRL --> UI : operation success
deactivate CTRL

UI --> GSM : Display success message
deactivate UI

deactivate GSM

@enduml
