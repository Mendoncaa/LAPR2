@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction

class AssignTeamToTaskUI {
}

class AssignTeamToTaskController {
    + AssignTeamToTaskController(employeeRepository, taskRepository, notificationService)
    + assignTeam(employees, task)
}

class Repositories {
    - Repositories()
    + getInstance() : Repositories
    + getEmployeeRepository()
    + getTaskRepository()
    + getAuthenticationRepository()
    + getTemMemberRepository()
    + getTeamRepository()
}

class AuthenticationRepository {
    + getCurrentUserSession()
}


class UserSession {
    + isLoggedInWithRole()
    + getUserId()
}

class TeamRepository {
    + createTeam(minSize: int, maxSize: int, skills: List<Skill>, teamMembers: List<TeamMember>): Team
}

class Team {
    - minSize: int
    - maxSize: int
    - skills: List<Skill>
    - teamMembers: List<TeamMember>
    + assignTeamMember(teamMember: TeamMember): void
}

'class EmployeeRepository {
'    + getEmployeesByOrganization(organization)
'}

'class OrganizationRepository {
'    + getOrganizationByUserEmail(email)
'}

'class Organization {
'    - String name
'    - String vatNumber
'    - String phone
'    - String email
'    - Address postalAddress
'    - validateSkill(skill)
'    + Organization(name, vatNumber, webSite, phone, email, postalAddress)
'    - getUserByEmail(email)
'}

class TaskRepository {
    + getTask(taskId)
}

class TaskRepository {
  +TaskExistsByTitle(Title)
}

class Tasks {
  -tasks: List<Task>
  +getTasks(): List<Task>
}

class Task {
    + title: String
    + greenSpace: GreenSpace
    + description: String
    + status: Status
    + urgency: Urgency
    + days: int
    + hours: int
    + getTitle(): String
    + getGreenSpace(): GreenSpace
    + getDescription(): String
    + getStatus(): Status
    + setStatus(): Status
    + getUrgency(): Urgency
    + getDays(): int
    + getHours(): int
    + toString(): String
    + findTasksByDateRange(startDate: Date, endDate: Date): List<Task>
    + compareTo(otherTask: Task): int
}

class NotificationService {
    + notifyTeamAssignment(employees, task)
}

'class Employee {
'    - String name
'    - String email
'    + sendNotification()
'}



Repositories -> Repositories : instance
AssignTeamToTaskUI .> AssignTeamToTaskController
AssignTeamToTaskController .> Repositories : repositories
Repositories --> "1" TeamRepository
TeamRepository --> "*" Team : employees
AuthenticationRepository -> "1" UserSession : usersession
Repositories --> "1" AuthenticationRepository
Repositories --> "1" TaskRepository
Tasks --> "*" Task : tasks
TaskRepository --> Tasks
Task "1" <-- "1" Team : assigns
AssignTeamToTaskController .> AuthenticationRepository
NotificationService .> Team : notifies


@enduml
