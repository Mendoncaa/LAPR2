@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "Green Space Manager\n(GSM)" as GSM
participant ":AssignTeamToTaskUI" as UI
participant ":AssignTeamToTaskController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "AuthFacade\n:AuthenticationRepository" as AUTHREP
participant "userSession\n:UserSession" as USER
participant "taskRepository:\nTaskRepository" as TaskRepository
participant "task\n:Task" as TASK
participant "teamRepository:\nTeamRepository" as TeamRepository
participant "team\n:Team" as TEAM
participant "NotificationService\n:NotificationService" as NOTIF

activate GSM

        GSM -> UI : asks to assign a team to a task
        activate UI

        UI --> GSM : requests data (Team and Task details)
    deactivate UI

    GSM -> UI : provides requested data (Team and Task details)
    activate UI

        UI --> GSM : shows all data and requests confirmation
    deactivate UI

    GSM -> UI : confirms data
    activate UI

        UI -> CTRL : assignTeam(employees, task)
        activate CTRL

        CTRL -> CTRL : getUserFromSession()

        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : Repositories
        deactivate RepositorySingleton

        CTRL -> PLAT : getAuthenticationRepository()
        activate PLAT
        CTRL <-- PLAT : AuthenticationRepository()
        deactivate PLAT

        CTRL -> AUTHREP : getCurrentUserSession()
        activate AUTHREP

        AUTHREP -> USER : isLoggedWithRole(GSM)
        activate USER

        AUTHREP <-- USER : "True/False"
        AUTHREP --> USER : getUserId(email)
        AUTHREP <-- USER : userId(email)
        deactivate USER

        CTRL <-- AUTHREP : userId(email)
        deactivate AUTHREP

        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : Repositories
        deactivate RepositorySingleton

        CTRL -> PLAT : getTaskRepository()
        activate PLAT
        CTRL <-- PLAT : TaskRepository()
        deactivate PLAT

        CTRL -> TaskRepository : getTask(taskId)
        activate TaskRepository

            TaskRepository -> TASK : anyTaskHasThisId(taskId)
            activate TASK
            TaskRepository <-- TASK : True/False
            deactivate TASK

        CTRL <-- TaskRepository : task
        deactivate TaskRepository

        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : Repositories
        deactivate RepositorySingleton

        CTRL -> PLAT : getTeamRepository()
        activate PLAT
        CTRL <-- PLAT : TeamRepository()
        deactivate PLAT

        CTRL -> TeamRepository : getTeamById(teamId)
        activate TeamRepository

            TeamRepository -> TEAM : anyTeamHasThisId(teamId)
            activate TEAM
            TeamRepository <-- TEAM : True/False
            deactivate TEAM

        CTRL <-- TeamRepository : team
        deactivate TeamRepository

        CTRL -> TASK : assignTeam(team)
        activate TASK

        TASK -> TASK : setStatus(assigned)
        TASK --> CTRL : updated task
        deactivate TASK

        CTRL -> NOTIF : notifyTeamAssignment(employees, task)
        activate NOTIF

        NOTIF --> CTRL : notification sent
        deactivate NOTIF

        CTRL --> UI : task assigned and notification sent
    deactivate CTRL

    UI --> GSM : displays operation success
    deactivate UI

deactivate GSM

@enduml
