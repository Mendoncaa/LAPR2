@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "Green Space Manager" as GSM
participant ":ToDoListUI" as UI
participant ":ToDoListController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "TaskRepository:\nTaskRepository" as TASKREP
participant "AuthFacade\n:AuthenticationRepository" as AUTHREP
participant "userSession\n:UserSession" as USER

participant "EmployeeRepository\n:EmployeeRepository" as EMPREP
participant "Employee\n:Employee" as EMP
participant "OrganizationRepository\n:OrganizationRepository" as ORGREP
participant "Organization\n:Organization" as ORG

activate GSM

        GSM -> UI : requests to add a new To-Do List entry
        activate UI

        UI --> GSM : requests data (Title, Description, Green Space, Degree of Urgency, Expected Duration)
    deactivate UI

    GSM -> UI : types requested data
    activate UI

    UI -> CTRL : addNewTask(title, description, greenSpace, urgency, duration)
    activate CTRL

        CTRL -> CTRL : getUserFromSession()

        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : Repositories
        deactivate RepositorySingleton

        CTRL -> PLAT : getAuthenticationRepository()
        activate PLAT
        CTRL <-- PLAT : AuthenticationRepository()
        deactivate PLAT

        CTRL -> AUTHREP : getCurrentUserSession()
        activate AUTHREP

        AUTHREP -> USER : isLoggedWithRole(GSM)
        activate USER

        AUTHREP <-- USER : "True/False"
        AUTHREP --> USER : getUserId(email)
        AUTHREP <-- USER : userId(email)
        deactivate USER

        CTRL <-- AUTHREP : userId(email)
        deactivate AUTHREP

        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : Repositories
        deactivate RepositorySingleton

        CTRL -> PLAT : getOrganizationRepository()
        activate PLAT
        CTRL <-- PLAT : OrganizationRepository()
        deactivate PLAT

        CTRL -> ORGREP : getOrganizationByUserID(email)
        activate ORGREP
        loop
            ORGREP -> ORG : anyUserHasId(email)
            ORG --> ORGREP : True/False
        deactivate ORGREP
        end
        ORGREP --> CTRL : organization

        CTRL -> PLAT : getEmployeeRepository()
        activate PLAT
        CTRL <-- PLAT : EmployeeRepository()
        deactivate PLAT

        CTRL -> EMPREP : getEmployeeByUserID(email)
        activate EMPREP
        loop
            EMPREP -> EMP : anyUserHasId(email)
            EMP --> EMPREP : True/False
        deactivate EMPREP
        end
        EMPREP --> CTRL : employee

        CTRL -> EMP : createTask(title, description, greenSpace, urgency, duration)
        activate EMP
        EMP -> CTRL : Task instance
        deactivate EMP

        EMP -> TASK : create(Task instance)
                note right of TASK
                  Task constructor validates task data
                endnote

                activate EMP
                    EMP -> EMP : validateTask(Task)

                    deactivate EMP

                EMP --> CTRL : Task

        CTRL -> TASKREP : save(Task instance)
        activate TASKREP
        TASKREP --> CTRL : success
        deactivate TASKREP

        CTRL --> UI : operation success
        
    deactivate CTRL

    UI --> GSM : Display success message
    deactivate UI

deactivate GSM

@enduml
