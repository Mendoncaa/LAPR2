@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

actor "Green Space Manager" as GSM
participant ":ToDoListUI" as UI
participant ":ToDoListController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "AuthFacade\n:AuthenticationRepository" as AUTHREP
participant "userSession\n:UserSession" as USER

participant "EmployeeRepository\n:EmployeeRepository" as EMPREP
participant "Employee\n:Employee" as EMP
participant "OrganizationRepository\n:OrganizationRepository" as ORGREP
participant "Organization\n:Organization" as ORG
participant "GreenSpaces\n:GreenSpaces" as GSR

activate GSM

    GSM -> UI : requests to add a new To-Do List entry
    activate UI

    UI --> GSM : requests data (Title, Description, Expected Duration)
    deactivate UI

    GSM -> UI : types requested data (Title, Description, Expected Duration)
    activate UI

    UI -> CTRL : getAvailableGreenSpaces()

    CTRL -> CTRL : getUserFromSession()

            CTRL -> RepositorySingleton : getInstance()
            activate RepositorySingleton
            CTRL <-- RepositorySingleton : Repositories
            deactivate RepositorySingleton

            CTRL -> PLAT : getAuthenticationRepository()
            activate PLAT
            CTRL <-- PLAT : AuthenticationRepository()
            deactivate PLAT

            CTRL -> AUTHREP : getCurrentUserSession()
            activate AUTHREP

            AUTHREP -> USER : isLoggedWithRole(GSM)
            activate USER

            AUTHREP <-- USER : "True/False"
            AUTHREP --> USER : getUserId(email)
            AUTHREP <-- USER : userId(email)
            deactivate USER

            CTRL <-- AUTHREP : userId(email)
            deactivate AUTHREP

            CTRL -> RepositorySingleton : getInstance()
            activate RepositorySingleton
            CTRL <-- RepositorySingleton : Repositories
            deactivate RepositorySingleton

            CTRL -> PLAT : getOrganizationRepository()
            activate PLAT
            CTRL <-- PLAT : OrganizationRepository()
            deactivate PLAT

            CTRL -> ORGREP : getOrganizationByUserID(email)
            activate ORGREP
            loop
                ORGREP -> ORG : anyUserHasId(email)
                activate ORG
                ORG --> ORGREP : True/False
                deactivate ORG
            end
            ORGREP --> CTRL : organization
            deactivate ORGREP



            CTRL -> PLAT : getEmployeeRepository()
            activate PLAT
            CTRL <-- PLAT : EmployeeRepository()
            deactivate PLAT

            CTRL -> EMPREP : getEmployeeByUserID(email)
            activate EMPREP
            loop
                EMPREP -> EMP : anyUserHasId(email)
                activate EMP
                EMP --> EMPREP : True/False
                deactivate EMP
            end
            EMPREP --> CTRL : employee
            deactivate EMPREP


    activate CTRL


    CTRL -> EMP : getGreenSpacesManagedByMe()
    activate EMP
    EMP -> GSR: getGreenSpacesManagedByMe()


    activate GSR
    GSR --> EMP : List <GreenSpace>
    deactivate GSR


    EMP -> CTRL: List <GreenSpace>
    deactivate EMP

    CTRL --> UI : List <GreenSpace>

    UI --> GSM: Green Spaces managed by the GSM







    GSM -> UI : selects a green space (green spaces managed by me) from greenSpaceList
    activate UI

    UI -> GSM : display urgency options (High, Medium, Low)
    GSM -> UI : selects urgency option
    activate UI

    UI -> CTRL : addNewTask(title, description, selectedGreenSpace, selectedUrgency, duration)
    activate CTRL



        CTRL -> EMP : createTask(title, description, selectedGreenSpace, selectedUrgency, duration)
        activate EMP


        EMP -> TASK** : create(Task instance)
            note right of TASK
              Task constructor validates task data
            endnote
        activate TASK
        TASK -> EMP : Task Instance
        deactivate TASK
                EMP -> EMP : validateTask(Task)

                EMP-> EMP: addTask(Task)

                EMP --> CTRL : Task

                deactivate EMP





        CTRL --> UI : Task
    
deactivate CTRL

UI --> GSM : Display success message
deactivate UI

deactivate GSM

@enduml
