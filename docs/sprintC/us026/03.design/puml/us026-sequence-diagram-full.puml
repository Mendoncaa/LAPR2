@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "GSM" as ADM
participant ":AddVehiclesToTaskUI" as UI
participant ":AddVehiclesToTaskController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "AuthFacade\n:AuthenticationRepository" as AUTHREP
participant "userSession\n:UserSession" as USER
participant "organizationRepository:\nOrganizationRepository" as OrganizationRepository
participant "organization\n:Organization" as ORG
participant "employeeRepository\n:EmployeeRepository" as EMPREP
participant "employee\n:Employee" as EMP
participant "vehicleRepository:\nVehicleRepository" as VEHREP
participant "tasks:\nTasks" as TASKS
participant "task:\nTask" as TASK


activate ADM

    ADM -> UI : asks to assign vehicles to an entry in the Agenda.
    activate UI

        UI -> CTRL : getThisGsmTasksInAgenda()
                activate CTRL


        CTRL -> CTRL : getUserFromSession()
        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : Repositories
        deactivate RepositorySingleton
        CTRL -> PLAT : getAuthenticationRepository()
        activate PLAT
        CTRL <-- PLAT : AuthenticationRepository()
        deactivate PLAT
        CTRL -> AUTHREP : getCurrentUserSession()
        activate AUTHREP
            AUTHREP -> USER : isLoggedWithRule(GSM)
            activate USER
            AUTHREP <-- USER : "True/False"
            AUTHREP --> USER : getUserId(email)
            AUTHREP <-- USER : userId(email)
            deactivate USER
        CTRL <-- AUTHREP : userId(email)
        deactivate AUTHREP

        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : Repositories
        deactivate RepositorySingleton
        CTRL -> PLAT : getOrganizationRepository()
        activate PLAT
        CTRL <-- PLAT : OrganizationRepository()
        deactivate PLAT
        CTRL -> OrganizationRepository :getOrganizationByUserId(email)
        activate OrganizationRepository
            loop for each organization
            OrganizationRepository -> ORG : anyEmployeeHasThisUserId(email)
            activate ORG
            OrganizationRepository <-- ORG : True/False
            deactivate ORG
            end loop
        CTRL <-- OrganizationRepository : organization
        deactivate OrganizationRepository


        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : repositories
        deactivate RepositorySingleton
        CTRL -> PLAT : getVehiclesRepository()
        activate PLAT
        CTRL <-- PLAT : vehiclesRepository
        deactivate PLAT
        CTRL->VEHREP : ListAllVehicles()
        activate VEHREP
        CTRL<-- VEHREP : List<Vehicle>
        deactivate VEHREP

        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : repositories
        deactivate RepositorySingleton
        CTRL -> PLAT : getEmployeeRepository()
        activate PLAT
        CTRL <-- PLAT : EmployeeRepository
        deactivate PLAT
        CTRL -> EMPREP : listThisGsmTasksInAgenda(userEmail)
        activate EMPREP
        CTRL <-- EMPREP : Employee
        deactivate EMPREP
        CTRL -> EMP : listThisGsmTasksInAgenda(userEmail)
        activate EMP
            EMP -> TASKS : filterThisGsmTasksInAgenda(userEmail))
            activate TASKS
                loop for each Task
                            TASKS -> TASK : getThisGsmTasksInAgenda(email)
                            activate TASK
                            TASKS <-- TASK : Task
                            deactivate TASK
                            end loop
            EMP<-- TASKS : List<Task>
            deactivate TASKS
        CTRL <-- EMP : List<Task>
        deactivate EMP
    UI <-- CTRL : listThisGsmTasksInAgenda
    deactivate CTRL
ADM <-- UI : List tasks in the Agenda and ask to select one
deactivate UI


ADM -> UI : Selects task
activate UI
    UI-> CTRL : listVehiclesNotAssignedByDateOfTasks(Task)
    activate CTRL
        CTRL -> EMP : filterVehiclesNotAssignedByDateOfTasks(Task,List<Vehicle>)
        activate EMP
            EMP -> TASKS : filterVehiclesNotAssignedByDateOfTasks(Task,Vehicle)
            activate TASKS
            loop for each Vehicle
                loop for each Task
                    TASKS -> TASK : isThisVehicleAvailable(Task, Vehicle)
                    activate TASK
                    TASKS <-- TASK : "True/False"
                    deactivate TASK
                end loop
            end loop
            EMP <-- TASKS : List<Vehicle>
            deactivate TASKS
        CTRL <-- EMP : List<Vehicle>
        deactivate EMP

    UI <-- CTRL : listVehiclesNotAssignedByDateOfTasks
    deactivate CTRL
ADM <-- UI : List all available vehicles that can be selected
deactivate UI
ADM -> UI : Selects one or more vehicles
activate UI
    UI --> ADM : Show data and request confirmation
    deactivate UI
ADM -> UI : submits data
    activate UI
    UI -> CTRL : updateTaskVehicles(task, vehicles)
    activate CTRL
        CTRL -> EMP: updateTaskVehicles(task, vehicles)
            activate EMP
                EMP -> TASK: updateTaskVehicles(task, vehicles)
                activate TASK
                    EMP -> EMP: addUpdatedTaskVehicles(task, vehicles)
                    EMP -> EMP: validateTask(task, vehicles)
                    deactivate TASK
                    EMP --> EMP
                    EMP --> EMP
                EMP --> CTRL : UpdatedTask
                deactivate EMP
        CTRL --> UI: UpdatedTask
        deactivate CTRL
    UI --> ADM: displays operation success
    deactivate UI
deactivate ADM


@enduml