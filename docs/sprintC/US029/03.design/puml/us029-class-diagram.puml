@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction


class TaskCompletionUI {
    + displayTaskList(tasks: List<Task>)
    + requestDateRange()
    + requestTaskStatusFilter()
}

class TaskCompletionController {
    + TaskCompletionController(employeeRepository, userSession)
    + recordTaskCompletion(task: Task, completionDate: Date)
}

class Repositories {
    - Repositories()
    + getInstance() : Repositories
    + getEmployeeRepository() : EmployeeRepository

}

class OrganizationRepository {
    + getOrganizationByUserEmail(email)
}

class Organization {
    - String name
    - String vatNumber
    - String phone
    - String email
    - Address postalAddress
    + Organization(name, vatNumber, webSite, phone, email, postalAddress)
    - getUserByEmail(email)
}

class AuthenticationRepository {
    + getCurrentUserSession()
}

class UserSession {
    + isLoggedInWithRole()
    + getUserId()
}

class EmployeeRepository {
    - EmployeeRepository()
    + listEmployees()
    + emailExists(mail)
    + getEmployeeByUserEmail(email)
}

class Employee {
    - String name
    - Date birthdate
    - Date admission date
    - Address postalAddress
    - String phone
    - String email
    - String ID doc type
    - String ID document number
    - String Taxpayer ID
    + CompareTo(TaxPayerID)
    + Clone()
    + toString()
    + changeStatus (Status)
}


class Tasks {
    +filterThisCollaboratorTasksInAgenda(userEmail):List<Tasks>
}

class Task {
    + title: String
    + greenSpace: GreenSpace
    + description: String
    + status: Status
    + urgency: Urgency
    + days: int
    + hours: int
    + getTitle(): String
    + getGreenSpace(): GreenSpace
    + getDescription(): String
    + getStatus(): Status
    +setStatus(): Status
    + getUrgency(): Urgency
    + getDays(): int
    + getHours(): int
    + toString(): String
    + findTasksByCollaboratorAndDateRange(collaboratorId: String, startDate: Date, endDate: Date): List<Task>
    + compareTo(otherTask: Task): int
}


enum Status {
    PLANNED
    POSTPONED
    CANCELED
    DONE
}




Repositories -> Repositories : instance
TaskCompletionUI .> TaskCompletionController
TaskCompletionController.> AuthenticationRepository
Repositories --> "1" OrganizationRepository
OrganizationRepository --> "*" Organization : organizations
Organization "1" --> "1" EmployeeRepository
Organization "1" --> "*" Employee : employs
TaskCompletionController .> Repositories : repositories
Repositories --> "1" AuthenticationRepository
Repositories --> "1" EmployeeRepository
Repositories --> "1" Tasks
AuthenticationRepository -> "1" UserSession : usersession
EmployeeRepository "1" --> "*" Employee : aggregates
Tasks "1" -> "*" Task
Task --> Status : has
Employee "1" -> "1" Tasks

@enduml
