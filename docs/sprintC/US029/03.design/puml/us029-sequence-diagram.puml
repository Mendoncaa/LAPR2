@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Collaborator" as ADM
participant ":TaskCompletionUI" as UI
participant ":TaskCompletionController" as CTRL
participant ":Repositories" as RepositorySingleton
participant "repositories\n:Repositories" as PLAT
participant "AuthFacade\n:AuthenticationRepository" as AUTHREP
participant "userSession\n:UserSession" as USER
participant "organizationRepository:\nOrganizationRepository" as OrganizationRepository
participant "organization\n:Organization" as ORG
participant "employeeRepository\n:EmployeeRepository" as EMPREP
participant "employee\n:Employee" as EMP
participant "tasks:\nTasks" as TASKS
participant "task:\nTask" as TASK


activate ADM

ADM -> UI : requests to mark a task as completed
    activate UI

UI -> CTRL : getThisCollaboratorTasksInAgenda()
    activate CTRL
CTRL -> CTRL : getUserFromSession()
        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : Repositories
        deactivate RepositorySingleton
        CTRL -> PLAT : getAuthenticationRepository()
        activate PLAT
        CTRL <-- PLAT : AuthenticationRepository()
        deactivate PLAT
        CTRL -> AUTHREP : getCurrentUserSession()
        activate AUTHREP
            AUTHREP -> USER : isLoggedWithRule(Collaborator)
            activate USER
            AUTHREP <-- USER : "True/False"
            AUTHREP --> USER : getUserId(email)
            AUTHREP <-- USER : userId(email)
            deactivate USER
        CTRL <-- AUTHREP : userId(email)
        deactivate AUTHREP

        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : Repositories
        deactivate RepositorySingleton
        CTRL -> PLAT : getOrganizationRepository()
        activate PLAT
        CTRL <-- PLAT : OrganizationRepository()
        deactivate PLAT
        CTRL -> OrganizationRepository :getOrganizationByUserId(email)
        activate OrganizationRepository
            loop for each organization
            OrganizationRepository -> ORG : anyEmployeeHasThisUserId(email)
            activate ORG
            OrganizationRepository <-- ORG : True/False
            deactivate ORG
            end loop
        CTRL <-- OrganizationRepository : organization
        deactivate OrganizationRepository


        CTRL -> RepositorySingleton : getInstance()
        activate RepositorySingleton
        CTRL <-- RepositorySingleton : repositories
        deactivate RepositorySingleton

        CTRL -> PLAT : getEmployeeRepository()
                activate PLAT
                CTRL <-- PLAT : EmployeeRepository
                deactivate PLAT
                CTRL -> EMPREP : listThisCollaboratorTasksInAgenda(userEmail)
                activate EMPREP
                CTRL <-- EMPREP : Employee
                deactivate EMPREP
                CTRL -> EMP : listThisCollaboratorTasksInAgenda(userEmail)
                activate EMP
                    EMP -> TASKS : filterThisCollaboratorTasksInAgenda(userEmail))
                    activate TASKS
                        loop for each Task
                                    TASKS -> TASK : getThisCollaboratorTasksInAgenda(email)
                                    activate TASK
                                    TASKS <-- TASK : Task
                                    deactivate TASK
                                    end loop
                    EMP<-- TASKS : List<Task>
                    deactivate TASKS
                CTRL <-- EMP : List<Task>
                deactivate EMP
            UI <-- CTRL : listThisCollaboratorTasksInAgenda
            deactivate CTRL
        ADM <-- UI : list collaborator tasks in schedule
        deactivate UI

ADM -> UI : selects tasks from the list
activate UI

UI -> CTRL: selectTask(task)
activate CTRL



CTRL -> UI: displayTaskDetails(TaskDetails) and request confirmation
deactivate CTRL

UI -> ADM: display tasks details and requests confirmation
deactivate UI

ADM -> UI: confirms task completion
activate UI

UI -> CTRL: confirmTaskCompletion(task)
activate CTRL

CTRL -> EMP: markAsCompleted(task)
activate EMP

EMP -> TASK: setStatus (Done)
activate TASK

TASK -> EMP: status set to Done


EMP  --> CTRL: task marked as completed
deactivate EMP

CTRL -> UI: success in recording task completion
deactivate CTRL

UI -> ADM: success in recording task completion
deactivate UI

deactivate ADM

@enduml

