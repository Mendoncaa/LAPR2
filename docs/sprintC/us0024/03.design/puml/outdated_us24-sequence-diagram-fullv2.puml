@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

title System Sequence Diagram (SSD) - US006

actor "GSM" as GSM

participant ":PostponeTaskUI\n" as UI
participant ":PostPoneTaskController\n" as CTRL
participant ":Repositories\n" as SR
participant ":repositories:\nRepositories" as RR
participant "AuthFacade\n:AuthenticationRepository" as AUTHREP
participant "userSession\n:UserSession" as USER
participant "organizationRepository:\nOrganizationRepository" as OR
participant "organization\n:Organization" as ORG
participant ":EmployeeRepository\n" as ER
participant ":Employee\n" as E
participant ":TaskRepository" as TR
participant "tasks:\nTasks" as TASKS
participant "task:\nTask" as TASK


activate GSM

'1
    GSM -> UI : asks to postpone a Task
    activate UI
'2
        UI --> GSM : requests TaskId
    deactivate UI
'3
    GSM -> UI : types requested data
    activate UI
'4
        UI --> GSM : shows all data and requests confirmation
    deactivate UI
'5
    GSM -> UI : confirms data
    activate UI
'6
        UI -> CTRL : postponeTask(task)
        activate CTRL


'7
        CTRL -> CTRL : getUserFromSession()
'8
        CTRL -> SR : getInstance()
        activate SR
'9
        CTRL <-- SR : Repositories
        deactivate SR
'10
        CTRL -> RR : getAuthenticationRepository()

        activate RR
'11
        CTRL <-- RR : AuthenticationRepository()
        deactivate RR


'12
        CTRL -> AUTHREP : getCurrentUserSession()

        activate AUTHREP



'13
        AUTHREP -> USER : isLoggedWithRule(GSM)

        activate USER
'14
        AUTHREP <-- USER : "True/False"

        AUTHREP --> USER : getUserId(email)
'16
        AUTHREP <-- USER : userId(email)
        deactivate USER
'17
        CTRL <-- AUTHREP : userId(email)
        deactivate AUTHREP



            CTRL -> SR : getInstance()
            activate SR
                SR --> CTRL : repositories
            deactivate SR
            CTRL -> RR : getOrganizationRepository()
            activate RR
                RR --> CTRL : OrganizationRepository()
            deactivate RR
'22
            CTRL -> OR : getOrganizationByUserId(email)
            activate OR
                loop for each organization
                    OR -> ORG : anyUserHasId(email)
                    activate ORG
'24
                        ORG --> OR : True/False
                    deactivate ORG
                end loop
'25
                OR --> CTRL : organization
            deactivate OR

'26
           CTRL -> SR : getEmployeeRepository()
            activate SR
'27
            CTRL <-- SR : EmployeeRepository()
            deactivate SR
'28
            CTRL -> ER : getEmployeeByUserID(email)
            activate ER
            loop
                ER -> E : anyUserHasId(email)
                activate E
                E --> ER : True/False
                deactivate E
            end
'31
            ER --> CTRL : employees
            deactivate ER
'32
            CTRL -> SR : getTaskRepository()
            activate SR
                SR --> CTRL : TaskRepository()
            deactivate SR
            CTRL -> TR : getTaskByTaskId(title)
            activate TR
                TR --> CTRL : task
            deactivate TR

            CTRL -> E : getEmployeeByUserID(userEmail)
            activate E
                E -> TASKS : getTasksInAgendaByEmployee(userEmail)
                activate TASKS
                    loop for each task
                    TASKS -> TASK : getTaskInAgenda(TaskID)

                    activate TASK
                        TASK --> TASKS : task

                    deactivate TASK
                    end loop
'40
                    TASKS --> E : Task
                deactivate TASKS
                E --> CTRL : Task
            deactivate E

            CTRL -> E : PostponeTask(taskId)
            activate E
                E -> TASK : PostponeTask(newDate)
                activate TASK
                    TASK -->E : task
                deactivate TASK
                activate E
                    E -> TASK : setStatus(Postponed)
                    activate TASK
                        TASK --> E: status set to postponed
                    deactivate TASK
                    E --> CTRL: task postponed
                deactivate E
            deactivate E

            CTRL --> UI : displays operation success







deactivate GSM


'
''hide footbox
''actor "Organization Employee" as GSM
'participant ":CreateTaskUI" as UI
'participant ":CreateTaskController" as CTRL
'participant ":Repositories" as RepositorySingleton
'participant "repositories\n:Repositories" as PLAT
'participant "taskCategoryRepository:\nTaskCategoryRepository" as TaskCategoryRepository
'participant ":ApplicationSession" as _APP
'participant "appSession\n:ApplicationSession" as APP
'participant "currentSession\n:UserSession" as SESSAO
'participant "organizationRepository:\nOrganizationRepository" as OrganizationRepository
'participant "organization\n:Organization" as ORG
'participant "task\n:Task" as TAREFA
'
'activate GSM
'
'        GSM -> UI : asks to create a new task
'
'        activate UI
'
''            UI --> GSM : requests data (reference, description,  informal \n description, technical description, duration, cost)
'            'create CTRL
'            UI -> CTRL** : create
'
'            UI -> CTRL : getTaskCategories()
'            activate CTRL
'
'                CTRL -> RepositorySingleton : getInstance()
'                activate RepositorySingleton
'
'                    RepositorySingleton --> CTRL: repositories
'                deactivate RepositorySingleton
'
'                CTRL -> PLAT : getTaskCategoryRepository()
'                activate PLAT
'
'                    PLAT --> CTRL: taskCategoryRepository
'                deactivate PLAT
'
'                CTRL -> TaskCategoryRepository : getTaskCategories()
'                activate TaskCategoryRepository
'
'                    TaskCategoryRepository --> CTRL : taskCategoryList
'                deactivate TaskCategoryRepository
'
'                CTRL --> UI : taskCategoryList
'            deactivate CTRL
'
'            UI --> GSM : shows task category list\n and asks to sleect one
'        deactivate UI
'
'    GSM -> UI : selects a task category
'    activate UI
'
'        UI --> GSM : requests data
'    deactivate UI
'
'    GSM -> UI : types requested data (reference, description, \ninformal description, technical description,\nduration, cost)
'    activate UI
'
'        UI --> GSM : shows selected category and requested data
'    deactivate UI
'
'    GSM -> UI : submits data
'    activate UI
'
'        UI -> CTRL : createTask(reference,\ndescription,\ninformalDescription,\ntechnicalDescription,\nduration, cost,\ntaskCategoryDescription)
'        activate CTRL
'
'            CTRL -> CTRL : getTaskCategoryByDescription(taskCategoryDescription)
'            activate CTRL
'
'                CTRL -> RepositorySingleton : getInstance()
'                activate RepositorySingleton
'
'                    RepositorySingleton --> CTRL: repositories
'                deactivate RepositorySingleton
'
'                CTRL -> PLAT : getTaskCategoryRepository()
'                activate PLAT
'
'                    PLAT -> CTRL : taskCategoryRepository
'                deactivate PLAT
'
'                CTRL -> TaskCategoryRepository : getTaskCategoryByDescription(taskCategoryDescription)
'                activate TaskCategoryRepository
'
'                    TaskCategoryRepository --> CTRL : taskCategory
'                deactivate TaskCategoryRepository
'                    CTRL --> CTRL : taskCategory
'            deactivate CTRL
'
'            |||
'            CTRL -> CTRL : getEmployeeFromSession()
'            activate CTRL
'
'                CTRL -> _APP: getInstance()
'                activate _APP
'                    _APP -> CTRL: appSession
'                deactivate _APP
'
'
'                CTRL -> APP: getCurrentSession()
'                activate APP
'
'                    APP --> CTRL: currentSession
'                deactivate APP
'
'                CTRL -> SESSAO: email = getUserEmail()
'                activate SESSAO
'
'                    SESSAO --> CTRL: email
'                deactivate SESSAO
'
'
'                CTRL -> PLAT: getOrganizationRepository(email)
'                activate PLAT
'
'                    PLAT --> CTRL: organizationRepository
'                deactivate PLAT
'
'
'                CTRL -> OrganizationRepository: getOrganizationByEmployeeEmail(email)
'                activate OrganizationRepository
'
'                    loop [for each organization
'                        OrganizationRepository -> ORG : anyEmployeeHasEmail(email)
'                        activate ORG
'
'                             ORG --> OrganizationRepository : true/false
'                        deactivate ORG
'                    end
'                    OrganizationRepository --> CTRL : organization
'                deactivate OrganizationRepository
'
'                CTRL -> ORG: getEmployeeByEmail(email)
'                activate ORG
'
'                    ORG --> CTRL : employee
'                deactivate ORG
'
'                CTRL --> CTRL : employee
'            deactivate CTRL
'
'            |||
'            CTRL -> ORG: createTask(employee, reference, description,\ninformalDescription, technicalDescription,\nduration, cost, , taskCategory, employee)
'            activate ORG
'
'                ORG -> TAREFA**: create(employee, reference, description,\ninformalDescription, technicalDescription,\nduration, cost, taskCategory, employee)
'                ORG -> ORG: addTask (task)
'
'
'                activate ORG
'                    ORG -> ORG: validateTask(task)
'                    activate ORG
'                        ORG --> ORG
'                    deactivate ORG
'
'                    ORG --> ORG
'                deactivate ORG
'
'                ORG --> CTRL : task
'
'            deactivate ORG
'
'            CTRL --> UI: task
'            deactivate CTRL
'            UI --> GSM: displays operation success
'    deactivate UI
'
'deactivate GSM

@enduml