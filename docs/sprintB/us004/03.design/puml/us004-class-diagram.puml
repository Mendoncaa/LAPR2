@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction

class AssignSkillUI {
}

class AssignSkillController {
    - SkillRepository skillRepository
    - TeamMember teamMember

    'Construtor para inicializar o controlador com o SkillRepository e TeamMember
    + AssignSkillController(skillRepository: SkillRepository, teamMember: TeamMember)

    'Método para atribuir skills a um membro da equipe
    + assignSkillToTeamMember(teamMemberId: String, skillId: String): void
}

class Repositories {
    - SkillRepository skillRepository
    - OrganizationRepository organizationRepository

    'Construtor para inicializar os repositórios
    + Repositories()

    'Método para obter o repositório das skills
    + getSkillRepository(): SkillRepository

    'Método para obter o repositório da organização
    + getOrganizationRepository(): OrganizationRepository


}

class SkillRepository {
    'Retorna uma skill com base no seu ID
    + getSkillById(skillId: String): Skill

    'Adiciona uma nova skill ao repositório
    + addSkill(skill: Skill): void
}

 class TeamMember {
     - id: String
     - name: String
     - List<Skill> skills

     'Construtor para criar um novo membro da equipe
     + TeamMember(name: String)

     'Método para adicionar uma skill a um membro da equipe
     + addSkill(skill: Skill): void

 }

 class Skill {
    - id: String
    - name: String

    'Construtor para criar uma nova skill
    + Skill(name: String)
  }

AssignSkillUI .> AssignSkillController
AssignSkillController .> Repositories
AssignSkillController .> SkillRepository
AssignSkillController .> TeamMember
Repositories --> SkillRepository
TeamMember ---> Skill



@enduml