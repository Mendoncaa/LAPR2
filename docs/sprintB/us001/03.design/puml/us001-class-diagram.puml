@startuml
'skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false
skinparam linetype polyline
'skinparam linetype orto

skinparam classAttributeIconSize 0

'left to right direction

class CreateSkillUI {
}

class CreateSkillController {
    - SkillRepository skillRepository
    - TeamMember teamMember

    'Construtor para inicializar o controlador com o SkillRepository e TeamMember
    + CreateSkillController(skillRepository: SkillRepository, teamMember: TeamMember)

    'Método para criar uma nova skill
    + createSkill(skillName: String): void
}

class Repositories {
    - static Repositories instance
    - SkillRepository skillRepository

    'Construtor privado para implementar o padrão Singleton
    - Repositories()

    'Método para obter a instância Singleton de Repositories
    + static getInstance(): Repositories

    'Método para obter o repositório das skills
    + getSkillRepository(): SkillRepository
}


class SkillRepository {
    - List<Skill> skills

    'Construtor para inicializar o repositório de skills
    + SkillRepository()

    'Retorna uma skill com base no seu nome
    + getSkillByName(skillName: String): Skill

    'Cria uma nova skill e a adiciona ao repositório
    + createSkill(skillName: String): Skill

    'Remove uma skill do repositório
    + deleteSkill(skillId: String): void
}


class TeamMember {
    - id: String
    - name: String
    - List<Skill> skills

    'Construtor para criar um novo membro da equipe
    + TeamMember(name: String)

    'Método para adicionar uma skill a um membro da equipe
    + addSkill(skill: Skill): void
}

class Skill {
    - String name

    'Construtor para criar uma nova skill
    + Skill(name: String)
}

CreateSkillUI .> CreateSkillController
CreateSkillController .> Repositories
CreateSkillController .> SkillRepository
CreateSkillController .> TeamMember
Repositories --> SkillRepository
TeamMember ---> Skill


@enduml