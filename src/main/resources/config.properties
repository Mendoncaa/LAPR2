# Available sorting algorithms
sortingAlgorithms=QuickSortAlgorithm,HeapSortAlgorithm

# QuickSortAlgorithm logic
QuickSortAlgorithm=\
public class QuickSortAlgorithm implements SortingAlgorithms {\
    @Override\
    public List<GreenSpace> sort(List<GreenSpace> greenSpaces) {\
        quickSort(greenSpaces, 0, greenSpaces.size() - 1);\
        return greenSpaces;\
    }\
    private void quickSort(List<GreenSpace> list, int low, int high) {\
        if (low < high) {\
            int pi = partition(list, low, high);\
            quickSort(list, low, pi - 1);\
            quickSort(list, pi + 1, high);\
        }\
    }\
    private int partition(List<GreenSpace> list, int low, int high) {\
        GreenSpace pivot = list.get(high);\
        int i = (low - 1);\
        for (int j = low; j < high; j++) {\
            if (list.get(j).getArea() > pivot.getArea()) {\
                i++;\
                Collections.swap(list, i, j);\
            }\
        }\
        Collections.swap(list, i + 1, high);\
        return i + 1;\
    }\
}

# HeapSortAlgorithm logic
HeapSortAlgorithm=\
public class HeapSortAlgorithm implements SortingAlgorithms {\
    @Override\
    public List<GreenSpace> sort(List<GreenSpace> greenSpaces) {\
        heapSort(greenSpaces);\
        return greenSpaces;\
    }\
    private void heapSort(List<GreenSpace> list) {\
        int n = list.size();\
        for (int i = n / 2 - 1; i >= 0; i--)\
            heapify(list, n, i);\
        for (int i = n - 1; i >= 0; i--) {\
            Collections.swap(list, 0, i);\
            heapify(list, i, 0);\
        }\
    }\
    private void heapify(List<GreenSpace> list, int n, int i) {\
        int largest = i;\
        int left = 2 * i + 1;\
        int right = 2 * i + 2;\
        if (left < n && list.get(left).getArea() > list.get(largest).getArea())\
            largest = left;\
        if (right < n && list.get(right).getArea() > list.get(largest).getArea())\
            largest = right;\
        if (largest != i) {\
            Collections.swap(list, i, largest);\
            heapify(list, n, largest);\
        }\
    }\
}
